---
author: 111qqz
date: 2015-07-30 13:19:00+00:00
draft: false
title: sgu 455. Sequence analysis （floyd 判圈算法，O(1)空间复杂度求循环节）
type: post
url: /2015/07/sgu455/
categories:
- ACM
tags:
- floyd 判圈
---




#### 455. Sequence analysis







Time limit per test: 1 second(s)
Memory limit: 4096 kilobytes




input: standard
output: standard


_Due to the slow 'mod' and 'div' operations with int64 type, all Delphi solutions for the problem 455 (Sequence analysis) run much slower than the same code written in C++ or Java. We do not guarantee that Delphi solution exists. _

You are given a sequence of signed 64-bit integers defined as follows:



	  * _x_0 = 1,
	  * ![](https://111qqz.com/wp-content/uploads/2015/11/facbf5949d0e39006c20ef3f70f04d53.png)
,

where

mod

is a remainder operator. All arithmetic operations are evaluated without overflow checking. Use standard "remainder" operator for programming languages (it differs from the mathematical version; for example ![](https://111qqz.com/wp-content/uploads/2015/11/c8b76878f844d236c2e2d90d05676c25.png)
 in programming, while ![](https://111qqz.com/wp-content/uploads/2015/11/cbf91ed48f465270e2a7c47cd355f9fb.png)
 in mathematics).

Let's call a sequence element _x__p_ repeatable if it occurs later in the sequence — meaning that there exists such _q_, _q_ > _p_, that _x__q_ = _x__p_. The first repeatable element _M_ of the sequence is such an element _x__m_that _x__m_ is repeatable, and none of the _x__p_ where _p_ < _m_ are repeatable.

Given _A_, _B_ and _C_, your task is to find the index of the second occurence of the first repeatable element _M_ in the sequence if the index is less or equal to 2 · 106. Per definition, the first element of the sequence has index 0.


**Input**


The only line of input contains three signed 64-bit integers: _A_, _B_ and _C_ (_B_ > 0, _C_ > 0).


**Output**


Print a single integer  — the index of the second occurence of the first repeatable member if it is less or equal to 2 · 106. Print -1 if the index is more than 2 · 106.


**Example(s)**


<table cellpadding="4" cellspacing="0" >
<tbody >
<tr >

<td width="400" valign="top" >

    
    sample input



</td>

<td width="400" valign="top" >

    
    sample output



</td>
</tr>
<tr >

<td width="400" valign="top" >

    
    2 2 9
    



</td>

<td width="400" valign="top" >

    
    4
    



</td>
</tr>
</tbody>
</table>

<table cellpadding="4" cellspacing="0" >
<tbody >
<tr >

<td width="400" valign="top" >

    
    sample input



</td>

<td width="400" valign="top" >

    
    sample output



</td>
</tr>
<tr >

<td width="400" valign="top" >

    
    2305843009213693951 1 9223372036854775807
    



</td>

<td width="400" valign="top" >

    
    5
    



</td>
</tr>
</tbody>
</table>

<table cellpadding="4" cellspacing="0" >
<tbody >
<tr >

<td width="400" valign="top" >

    
    sample input



</td>

<td width="400" valign="top" >

    
    sample output



</td>
</tr>
<tr >

<td width="400" valign="top" >

    
    -2 1 5
    



</td>

<td width="400" valign="top" >

    
    4
    



</td>
</tr>
</tbody>
</table>



**Note**


In the first sample test the sequence starts with the following numbers: 1, 3, 7, 6, 3, 7. The first repeatable element is 3. The second occurence of 3 has index 4.

In the second sample test the sequence starts with the following numbers: 1, 2305843009213693951, -4611686018427387903, 6917529027641081855, 0, 0, 0. The first repeatable element is 0. The second occurence of 0 has index 5.

In the third sample test the sequence starts with the following numbers: 1, -2, 4, -3, 1, -2, 4. The first repeatable element is 1. The second occurence of 1 has index 4.



比赛的时候逗了，往看空间限制了....

直接开了个set判重。。。显然MLE 了。。。

然后这道题的正解是 floyd判圈算法（也叫龟兔算法？）

http://www.cnblogs.com/oyking/p/4286916.html  这份题解讲得很详细
 

    
    /*************************************************************************
    	> File Name: code/2015summer/#5/CC.cpp
    	> Author: 111qqz
    	> Email: rkz2013@126.com 
    	> Created Time: 2015年07月30日 星期四 21时02分17秒
     ************************************************************************/
    #include<iostream>
    #include<iomanip>
    #include<cstdio>
    #include<algorithm>
    #include<cmath>
    #include<cstring>
    #include<string>
    #include<map>
    #include<set>
    #include<queue>
    #include<vector>
    #include<stack>
    #define y0 abc111qqz
    #define y1 hust111qqz
    #define yn hez111qqz
    #define j1 cute111qqz
    #define tm crazy111qqz
    #define lr dying111qqz
    using namespace std;
    #define REP(i, n) for (int i=0;i<int(n);++i)  
    typedef long long LL;
    typedef unsigned long long ULL;
    const int inf = 0x7fffffff;
    const int LIM = 2E6;
    LL a,b,c;
    LL next (LL x)
    {
        return (a*x+x%b)%c;
    }
    int main()
    {
        cin>>a>>b>>c;
        LL x = next(1);
        LL y = next(next(1));
        int v = 1;
        while (v<=LIM &&x!=y)
        {
    	x = next(x);  //乌龟走一步
    	y = next(next(y)); //兔子走两步
    	v++;
        }
        if (v>LIM)   //在规定范围内找不到循环节（兔子没有和乌龟到同一个位置）
        {
    	puts("-1");  
    	return 0;
        }
    
        x = 1;
        int mu = 0;  //找到循环节的起点
        while (x!=y) 
        {
    	x = next(x);
    	y = next(y);
    	mu++;
        }
        
        int lam = 1; //循环节的长度
        y = next(x);
        while (mu+lam <= LIM  &&x!=y)
        {
    	y = next(y);
    	lam++;
        }
        if (mu+lam<=LIM)
        {
    	printf("%d\n",mu+lam);
        }
        else
        {
    	puts("-1");
        }
    
    	return 0;
    }
    



